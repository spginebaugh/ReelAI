rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && request.auth.token.admin == true;
    }
    
    function isValidContentType(contentType, allowedTypes) {
      return contentType in allowedTypes;
    }
    
    function isWithinSizeLimit(maxSize) {
      return request.resource.size <= maxSize;
    }

    // Public Assets section
    match /public/{category}/{assetName} {
      // Anyone can read public assets
      allow read: if true;
      
      // Only admins can write to public assets
      allow write: if isAdmin() 
        && (
          category == 'assets' 
          ? isValidContentType(request.resource.contentType, [
              'image/jpeg',
              'image/png',
              'image/webp'
            ]) && isWithinSizeLimit(5 * 1024 * 1024)  // 5MB for public assets
          : false  // Other categories need explicit rules
        );
    }

    // User content section - matches {userId}/**
    match /{userId}/{allPaths=**} {
      // Base rule - users can only access their own content
      allow read, write: if isOwner(userId);
    }

    // Video content rules
    match /{userId}/{videoId}/video/video.mp4 {
      // Allow read for all authenticated users (assuming videos are public)
      allow read: if isAuthenticated();
      
      // Only allow upload by video owner with content and size validation
      allow create: if isOwner(userId)
        && isValidContentType(request.resource.contentType, [
          'video/mp4',
          'video/quicktime',
          'video/x-msvideo'
        ])
        && isWithinSizeLimit(500 * 1024 * 1024);  // 500MB for videos
      
      // Prevent updates - files should be immutable
      allow update: if false;
    }

    // Audio content rules
    match /{userId}/{videoId}/audio/{filename} {
      allow read: if isAuthenticated();
      
      allow create: if isOwner(userId)
        && isValidContentType(request.resource.contentType, [
          'audio/wav',
          'audio/x-wav',
          'audio/mpeg',
          'audio/mp3'
        ])
        && isWithinSizeLimit(50 * 1024 * 1024)  // 50MB for audio
        && (filename.matches('audio_[a-zA-Z]+\\.(wav|mp3)'));
      
      allow update: if false;
    }

    // Subtitle content rules
    match /{userId}/{videoId}/subtitles/{filename} {
      allow read: if isAuthenticated();
      
      allow create: if isOwner(userId)
        && isValidContentType(request.resource.contentType, [
          'application/json'
        ])
        && isWithinSizeLimit(1 * 1024 * 1024)  // 1MB for subtitles
        && filename.matches('subtitles_[a-zA-Z]+\\.json');
      
      allow update: if false;
    }

    // Thumbnail content rules
    match /{userId}/{videoId}/thumbnail/thumbnail.png {
      allow read: if isAuthenticated();
      
      allow create: if isOwner(userId)
        && isValidContentType(request.resource.contentType, [
          'image/jpeg',
          'image/png'
        ])
        && isWithinSizeLimit(5 * 1024 * 1024);  // 5MB for thumbnails
      
      allow update: if false;
    }

    // Profile picture rules
    match /{userId}/profile_pic/profile_pic.png {
      // Allow public read for profile pictures
      allow read: if isAuthenticated();
      
      // Only allow owner to upload with image validation
      allow create, update: if isOwner(userId)
        && isValidContentType(request.resource.contentType, [
          'image/jpeg',
          'image/png',
          'image/webp'
        ])
        && isWithinSizeLimit(5 * 1024 * 1024);  // 5MB limit for profile images
    }

    // Temporary uploads section
    match /{userId}/temp/{fileName} {
      // Strict owner-only access
      allow read, write: if isOwner(userId)
        && isWithinSizeLimit(500 * 1024 * 1024);  // 500MB limit for temp files
      
      // Files older than 24 hours should be deleted by a Cloud Function
    }
  }
} 